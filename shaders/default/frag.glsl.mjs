export default "varying vec3 vnormal;\nvarying vec2 vuv;\n\nvarying vec3 vsurface_to_light[8];\nvarying vec3 vsurface_to_view[8];\n\nvoid main () {\n\tvec3 normal = normalize(vnormal);\n\n\tvec3 lighting = vec3(0.0);\n\tvec3 specularity = vec3(0.0);\n\n\t// directional lights\n\tfor (int i = 0; i < 8; i += 1) {\n\t\tDirectionalLight light = DIRECTIONAL_LIGHTS[i];\n\n\t\tfloat multiplier = clamp(dot(normal, -light.direction), 0.0, 1.0);\n\t\tlighting += multiplier * light.color * light.intensity;\n\t}\n\n\t// point lights\n\tfor (int i = 0; i < 8; i += 1) {\n\t\tPointLight light = POINT_LIGHTS[i];\n\n\t\tvec3 surface_to_light = normalize(vsurface_to_light[i]);\n\n\t\tfloat multiplier = clamp(dot(normal, surface_to_light), 0.0, 1.0); // TODO is clamp necessary?\n\t\tlighting += multiplier * light.color * light.intensity;\n\n\t\tvec3 surface_to_view = normalize(vsurface_to_view[i]);\n\t\tvec3 half_vector = normalize(surface_to_light + surface_to_view);\n\t\tfloat specular = clamp(dot(normal, half_vector), 0.0, 1.0);\n\t\tspecularity += specular * light.color * light.intensity;\n\t}\n\n\tvec4 color = texture2D(TEXTURE, vuv);\n\tgl_FragColor = color;\n\n\t// gl_FragColor = vec4(COLOR, 1.0);\n\tgl_FragColor.rgb *= mix(AMBIENT_LIGHT, vec3(1.0, 1.0, 1.0), lighting);\n\tgl_FragColor.rgb += specularity;\n}";