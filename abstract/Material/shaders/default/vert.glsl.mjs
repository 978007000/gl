export default "varying vec3 v_normal;\n\n#ifdef USES_TEXTURES\nvarying vec2 v_uv;\n#endif\n\n#ifdef USES_BUMP_MAP\nvarying vec3 v_view_position;\n#endif\n\nvarying vec3 v_surface_to_light[NUM_LIGHTS];\nvarying vec3 v_surface_to_view[NUM_LIGHTS];\n\nvoid main() {\n\tvec4 pos = vec4(POSITION, 1.0);\n\tvec4 model_view_pos = VIEW * MODEL * pos;\n\n\tv_normal = (MODEL_INVERSE_TRANSPOSE * vec4(NORMAL, 0.0)).xyz;\n\n\t#ifdef USES_TEXTURES\n\tv_uv = UV;\n\t#endif\n\n\t// TODO\n\t#ifdef USES_BUMPMAP\n\t\tv_view_position = -model_view_pos.xyz;\n\t#endif\n\n\tfor (int i = 0; i < NUM_LIGHTS; i += 1) {\n\t\tPointLight light = POINT_LIGHTS[i];\n\n\t\tvec3 surface_world_position = (MODEL * pos).xyz;\n\t\tv_surface_to_light[i] = light.location - surface_world_position;\n\t\tv_surface_to_view[i] = CAMERA_WORLD_POSITION - surface_world_position;\n\t}\n\n\tgl_Position = PROJECTION * model_view_pos;\n}";